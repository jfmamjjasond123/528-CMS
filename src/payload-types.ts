/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    lessons: Lesson;
    modules: Module;
    courses: Course;
    categories: Category;
    instructors: Instructor;
    levels: Level;
    passages: Passage;
    passageQuestions: PassageQuestion;
    FL_exams: FLExam;
    FL_Passages: FL_Passage;
    FL_passage_questions: FLPassageQuestion;
    subjects: Subject;
    subjectCategories: SubjectCategory;
    questionSkills: QuestionSkill;
    questionTypes: QuestionType;
    distractorTypes: DistractorType;
    'mux-video': MuxVideo;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    lessons: LessonsSelect<false> | LessonsSelect<true>;
    modules: ModulesSelect<false> | ModulesSelect<true>;
    courses: CoursesSelect<false> | CoursesSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    instructors: InstructorsSelect<false> | InstructorsSelect<true>;
    levels: LevelsSelect<false> | LevelsSelect<true>;
    passages: PassagesSelect<false> | PassagesSelect<true>;
    passageQuestions: PassageQuestionsSelect<false> | PassageQuestionsSelect<true>;
    FL_exams: FLExamsSelect<false> | FLExamsSelect<true>;
    FL_Passages: FL_PassagesSelect<false> | FL_PassagesSelect<true>;
    FL_passage_questions: FLPassageQuestionsSelect<false> | FLPassageQuestionsSelect<true>;
    subjects: SubjectsSelect<false> | SubjectsSelect<true>;
    subjectCategories: SubjectCategoriesSelect<false> | SubjectCategoriesSelect<true>;
    questionSkills: QuestionSkillsSelect<false> | QuestionSkillsSelect<true>;
    questionTypes: QuestionTypesSelect<false> | QuestionTypesSelect<true>;
    distractorTypes: DistractorTypesSelect<false> | DistractorTypesSelect<true>;
    'mux-video': MuxVideoSelect<false> | MuxVideoSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  title: string;
  mediaType: 'image' | 'video';
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lessons".
 */
export interface Lesson {
  id: string;
  title: string;
  slug: string;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  type: 'video' | 'lesson';
  duration?: string | null;
  video?: (string | null) | MuxVideo;
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  module: string | Module;
  order: number;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mux-video".
 */
export interface MuxVideo {
  id: string;
  /**
   * A unique title for this video that will help you identify it later.
   */
  title: string;
  assetId?: string | null;
  duration?: number | null;
  /**
   * Pick a timestamp (in seconds) from the video to be used as the poster image. When unset, defaults to the middle of the video.
   */
  posterTimestamp?: number | null;
  aspectRatio?: string | null;
  maxWidth?: number | null;
  maxHeight?: number | null;
  playbackOptions?:
    | {
        playbackId?: string | null;
        playbackPolicy?: ('signed' | 'public') | null;
        playbackUrl?: string | null;
        posterUrl?: string | null;
        gifUrl?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "modules".
 */
export interface Module {
  id: string;
  title: string;
  slug: string;
  description?: string | null;
  course: string | Course;
  lessons?: (string | Lesson)[] | null;
  order: number;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "courses".
 */
export interface Course {
  id: string;
  title: string;
  slug: string;
  icon_class?: string | null;
  thumbnail?: (string | null) | Media;
  description_short: string;
  description_long?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  learning_outcomes?:
    | {
        outcome?: string | null;
        id?: string | null;
      }[]
    | null;
  estimated_total_hours?: string | null;
  modules?: (string | Module)[] | null;
  category: string | Category;
  instructor: string | Instructor;
  level: string | Level;
  status?: ('draft' | 'published') | null;
  order?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  title: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "instructors".
 */
export interface Instructor {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "levels".
 */
export interface Level {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "passages".
 */
export interface Passage {
  id: string;
  title: string;
  /**
   * Subject this passage belongs to
   */
  subject: string | Subject;
  content: {
    [k: string]: unknown;
  }[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subjects".
 */
export interface Subject {
  id: string;
  title: string;
  /**
   * Category this subject belongs to
   */
  subjectCategory?: (string | null) | SubjectCategory;
  /**
   * Passages associated with this subject
   */
  passages?: (string | Passage)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subjectCategories".
 */
export interface SubjectCategory {
  id: string;
  title: string;
  /**
   * Subjects belonging to this category
   */
  subjects?: (string | Subject)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "passageQuestions".
 */
export interface PassageQuestion {
  id: string;
  /**
   * Please select the passage this question belongs to
   */
  passage: string | Passage;
  /**
   * Select the skill this question tests
   */
  skill: string | QuestionSkill;
  /**
   * Select the type of question
   */
  questionType: string | QuestionType;
  /**
   * Please enter the question title
   */
  questionTitle: string;
  /**
   * Add options for the question. Make sure to mark exactly one option as correct.
   */
  options?:
    | {
        id?: string | null;
        text: string;
        /**
         * Select the distractor type for this option (optional)
         */
        distractorType?: (string | null) | DistractorType;
        /**
         * Mark this option as the correct answer
         */
        isCorrect: boolean;
        /**
         * Provide an explanation for this option (optional)
         */
        optionExplanation?: string | null;
      }[]
    | null;
  /**
   * Give the explanation for the question if available
   */
  'Question Explanation'?:
    | {
        [k: string]: unknown;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "questionSkills".
 */
export interface QuestionSkill {
  id: string;
  title: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "questionTypes".
 */
export interface QuestionType {
  id: string;
  title: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * Manage distractor types for question options
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "distractorTypes".
 */
export interface DistractorType {
  id: string;
  title: string;
  /**
   * Suggestion for how to improve or avoid this type of distractor
   */
  improvementText?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FL_exams".
 */
export interface FLExam {
  id: string;
  title: string;
  slug: string;
  /**
   * If exam type is Q-bank, total is not required. Please give 0 minute as value
   */
  totalTimeInMinutes: number;
  /**
   * Please select the passages for this exam
   */
  passages?: (string | Passage)[] | null;
  type: 'Full-Length Exam' | 'Q-bank' | 'Timed-Q-bank';
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FL_Passages".
 */
export interface FL_Passage {
  id: string;
  title: string;
  /**
   * Subject this passage belongs to
   */
  subject: string | Subject;
  exam: string | FLExam;
  content: {
    [k: string]: unknown;
  }[];
  /**
   * Questions associated with this passage
   */
  questions?: (string | FLPassageQuestion)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FL_passage_questions".
 */
export interface FLPassageQuestion {
  id: string;
  /**
   * Please select the passage this question belongs to
   */
  passage: string | FL_Passage;
  /**
   * Select the skill this question tests
   */
  skill: string | QuestionSkill;
  /**
   * Select the type of question
   */
  questionType: string | QuestionType;
  /**
   * Please enter the question title
   */
  questionTitle: string;
  /**
   * Add options for the question. Mark exactly one as correct.
   */
  options?:
    | {
        id?: string | null;
        text: string;
        /**
         * Select the distractor type for this option (optional)
         */
        distractorType?: (string | null) | DistractorType;
        /**
         * Mark this option as the correct answer
         */
        isCorrect: boolean;
        /**
         * Provide an explanation for this option (optional)
         */
        optionExplanation?: string | null;
      }[]
    | null;
  /**
   * Give the explanation for the question if available
   */
  'Question Explanation'?:
    | {
        [k: string]: unknown;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'lessons';
        value: string | Lesson;
      } | null)
    | ({
        relationTo: 'modules';
        value: string | Module;
      } | null)
    | ({
        relationTo: 'courses';
        value: string | Course;
      } | null)
    | ({
        relationTo: 'categories';
        value: string | Category;
      } | null)
    | ({
        relationTo: 'instructors';
        value: string | Instructor;
      } | null)
    | ({
        relationTo: 'levels';
        value: string | Level;
      } | null)
    | ({
        relationTo: 'passages';
        value: string | Passage;
      } | null)
    | ({
        relationTo: 'passageQuestions';
        value: string | PassageQuestion;
      } | null)
    | ({
        relationTo: 'FL_exams';
        value: string | FLExam;
      } | null)
    | ({
        relationTo: 'FL_Passages';
        value: string | FL_Passage;
      } | null)
    | ({
        relationTo: 'FL_passage_questions';
        value: string | FLPassageQuestion;
      } | null)
    | ({
        relationTo: 'subjects';
        value: string | Subject;
      } | null)
    | ({
        relationTo: 'subjectCategories';
        value: string | SubjectCategory;
      } | null)
    | ({
        relationTo: 'questionSkills';
        value: string | QuestionSkill;
      } | null)
    | ({
        relationTo: 'questionTypes';
        value: string | QuestionType;
      } | null)
    | ({
        relationTo: 'distractorTypes';
        value: string | DistractorType;
      } | null)
    | ({
        relationTo: 'mux-video';
        value: string | MuxVideo;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  title?: T;
  mediaType?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lessons_select".
 */
export interface LessonsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  description?: T;
  type?: T;
  duration?: T;
  video?: T;
  content?: T;
  module?: T;
  order?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "modules_select".
 */
export interface ModulesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  description?: T;
  course?: T;
  lessons?: T;
  order?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "courses_select".
 */
export interface CoursesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  icon_class?: T;
  thumbnail?: T;
  description_short?: T;
  description_long?: T;
  learning_outcomes?:
    | T
    | {
        outcome?: T;
        id?: T;
      };
  estimated_total_hours?: T;
  modules?: T;
  category?: T;
  instructor?: T;
  level?: T;
  status?: T;
  order?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  title?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "instructors_select".
 */
export interface InstructorsSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "levels_select".
 */
export interface LevelsSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "passages_select".
 */
export interface PassagesSelect<T extends boolean = true> {
  title?: T;
  subject?: T;
  content?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "passageQuestions_select".
 */
export interface PassageQuestionsSelect<T extends boolean = true> {
  passage?: T;
  skill?: T;
  questionType?: T;
  questionTitle?: T;
  options?:
    | T
    | {
        id?: T;
        text?: T;
        distractorType?: T;
        isCorrect?: T;
        optionExplanation?: T;
      };
  'Question Explanation'?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FL_exams_select".
 */
export interface FLExamsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  totalTimeInMinutes?: T;
  passages?: T;
  type?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FL_Passages_select".
 */
export interface FL_PassagesSelect<T extends boolean = true> {
  title?: T;
  subject?: T;
  exam?: T;
  content?: T;
  questions?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FL_passage_questions_select".
 */
export interface FLPassageQuestionsSelect<T extends boolean = true> {
  passage?: T;
  skill?: T;
  questionType?: T;
  questionTitle?: T;
  options?:
    | T
    | {
        id?: T;
        text?: T;
        distractorType?: T;
        isCorrect?: T;
        optionExplanation?: T;
      };
  'Question Explanation'?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subjects_select".
 */
export interface SubjectsSelect<T extends boolean = true> {
  title?: T;
  subjectCategory?: T;
  passages?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subjectCategories_select".
 */
export interface SubjectCategoriesSelect<T extends boolean = true> {
  title?: T;
  subjects?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "questionSkills_select".
 */
export interface QuestionSkillsSelect<T extends boolean = true> {
  title?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "questionTypes_select".
 */
export interface QuestionTypesSelect<T extends boolean = true> {
  title?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "distractorTypes_select".
 */
export interface DistractorTypesSelect<T extends boolean = true> {
  title?: T;
  improvementText?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mux-video_select".
 */
export interface MuxVideoSelect<T extends boolean = true> {
  title?: T;
  assetId?: T;
  duration?: T;
  posterTimestamp?: T;
  aspectRatio?: T;
  maxWidth?: T;
  maxHeight?: T;
  playbackOptions?:
    | T
    | {
        playbackId?: T;
        playbackPolicy?: T;
        playbackUrl?: T;
        posterUrl?: T;
        gifUrl?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}